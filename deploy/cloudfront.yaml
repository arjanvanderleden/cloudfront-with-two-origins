AWSTemplateFormatVersion: '2010-09-09'
# Transform: AWS::Serverless-2016-10-31

Description: |
  Protected S3 bucket with CloudFront Distribution
#  Protect downloads of content hosted on CloudFront
# Globals:
#   Function:
#     Timeout: 60

Parameters:
  # Make sure to include an alternate domain name that matches the certificate
  # Also make sure it matches the SubDomain Parameter in the Hosted Zone identified by Parameter HostedZoneId
  AlternateDomainName:
    Default: ''
    Description: 'Domain used for the CloudFront Distribution'
    Type: String
  HostedZoneId:
    Type: String
    Description: 'The hosted zone holding entries for AlternateDomainName'
  CertificateArn:
    Type: String
    # Make sure that the domain that is listed in the AlternateDomainName Parameter
    # matches the certificate
    Description: The Arn Of the certificate to be used for the CloudFront Distribution
  ModelBucketName:
    Type: String
    Description: 'Name of Bucket that holds content'
  CloudfrontOAI:
    Type: String
  CloudfrontOAIUserId:
    Type: String

Resources:
  S3Bucket:
    Properties:
      AccessControl: Private
      BucketName: !Ref AlternateDomainName
    Type: AWS::S3::Bucket

  CloudFrontDistribution:
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref AlternateDomainName
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: protected-app-bucket
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: "redirect-to-https"
        CacheBehaviors:
          - PathPattern: content/*
            TargetOriginId: protected-model-bucket
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: "redirect-to-https"
        PriceClass: PriceClass_100
        DefaultRootObject: index.html
        CustomErrorResponses:
        - ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
        Enabled: true
        Origins:
        - DomainName:
            !Sub ${ S3Bucket }.s3.amazonaws.com
          Id: protected-app-bucket
          S3OriginConfig:
            OriginAccessIdentity:
              !Sub origin-access-identity/cloudfront/${ CloudfrontOAI }
        - DomainName:
            !Sub ${ ModelBucketName }.s3.amazonaws.com
          Id: protected-model-bucket
          S3OriginConfig:
            OriginAccessIdentity:
              !Sub origin-access-identity/cloudfront/${ CloudfrontOAI }
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
    Type: AWS::CloudFront::Distribution

  CloudFrontBucketPolicy:
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
        -
          Resource: !Join [ "", [ "arn:aws:s3:::", !Ref S3Bucket, "/*" ]]
          Action:
          - s3:GetObject
          Effect: Allow
          Principal:
            CanonicalUser: !Ref CloudfrontOAIUserId
        Version: '2012-10-17'
    Type: AWS::S3::BucketPolicy

  Route53RecordSet:
    Type: "AWS::Route53::RecordSet"
    Properties:
      Name: !Ref AlternateDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        # is always Z2FDTNDATAQYW2, because it is the cloudfront hosted zone id
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref HostedZoneId

Outputs:
  SiteBucket:
    Value: !Ref S3Bucket
  CloudFrontDistribution:
    Value: !Ref CloudFrontDistribution
  Route53CloudFrontDistributionRecordSet:
    Value: !Ref Route53RecordSet